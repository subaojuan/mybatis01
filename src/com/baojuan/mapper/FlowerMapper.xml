<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="a.b">
  <!-- 
  使用#{}的情况
  <select id="selectById" resultType="com.baojuan.pojo.Flower" parameterType="int">
    select * from flower where id=#{1} -->
    <!-- 
    使用${}的情况
    <select id="selectById" resultType="com.baojuan.pojo.Flower" parameterType="com.baojuan.pojo.Flower">
	select * from flower where id=${id} -->
	
	<!-- 
	使用map传递双值
	<select id="selectById" resultType="com.baojuan.pojo.Flower" parameterType="map">
	select * from flower where id=#{id} and name=#{name} -->
	
  <select id="page" resultType="Flower" parameterType="map">
	select * from flower limit #{pageStart},#{pageSize}
	
  <!-- #{}与${}的区别
  #{}获取参数内容支持索引获取，param1获取指定位置，且使用占位符？
  如果参数是对象，则使用#{属性名}
  如果参数是map，则写成#{key}
  如果只有一个数据类型（基本数据类型或String），mybatis对#{}的内容没有要求
  ${}是纯字符串拼接，默认找${}的内容，会去访问get()set()函数
  
   -->
  </select>
  <select id="selAll" resultType="com.baojuan.pojo.Flower">
  select * from flower
  </select>
  
  
 <!--  <select id="selectById" resultType="int">
  select count(*) from flower
  </select> -->
  
  <select id="c" resultType="com.baojuan.pojo.Flower">
  select * from flower
  </select>
 
  
  <!-- 概念复习
 功能：从应用程序角度出发，软件具有哪些功能
 业务：完成功能是的逻辑，对应service中的一个方法
 事务： 冲数据库角度出发，完成业务时需要执行的sql集合，统称一个事务
 事务回滚：如果在一个事务中，某一个sql执行失败，希望回归到事务的原点，保证数据库数据的完整性
  在mybatis中默认关闭了jdbc的自动提交功能
  每一个session都自动不提交事务
  session.commit()提交事务
  fectory.openSession(true);自动提交
  mybatis底层是对jdbc的封装
  jdbc中是用executeUpdate（）执行增删改的sql，返回值为int，表示受影响的行数
  mybatis中的<insert>,<update>,<dalete>标签没有resultType属性，默认返回值都为int
  在openSession（）时mybatis会创建sqlSession同时创建Transaction（事务对象），同时autoCommit都为false
  如果出现异常，应该session.rollback()回滚事务
   -->
   
   <insert id="ins" parameterType="Flower">
   insert into flower values (default,#{name},#{price},#{num})
   </insert>
  </mapper>